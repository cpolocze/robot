---
openapi: 3.0.1
info:
  title: Robot Service API
  description: This is REST documentation for the Robot Service
  version: v1
components:
  schemas:
    robot:
      type: object
      properties:
        id:
          type: string
          format: uuid
        player:
          type: string
          format: uuid
        planet:
          type: string
          format: uuid
        alive:
          type: boolean
          example: true
        maxHealth:
          type: integer
          example: 100
        maxEnergy:
          type: integer
          example: 60
        energyRegen:
          type: integer
          example: 8
        attackDamage:
          type: integer
          example: 5
        miningSpeed:
          type: integer
          example: 10
        health:
          type: integer
          example: 75
        energy:
          type: integer
          example: 43
        healthLevel:
          type: integer
          minimum: 0
          maximum: 5
        damageLevel:
          type: integer
          minimum: 0
          maximum: 5
        miningSpeedLevel:
          type: integer
          minimum: 0
          maximum: 5
        miningLevel:
          type: integer
          minimum: 0
          maximum: 5
        energyLevel:
          type: integer
          minimum: 0
          maximum: 5
        energyRegenLevel:
          type: integer
          minimum: 0
          maximum: 5
        storageLevel:
          type: integer
          minimum: 0
          maximum: 5
        inventory:
          type: object
          properties:
            maxStorage:
              type: integer
              example: 20
            usedStorage:
              type: integer
              example: 5
            storedCoal:
              type: integer
              example: 3
            storedIron:
              type: integer
              example: 2
            storedGem:
              type: integer
              example: 0
            storedGold:
              type: integer
              example: 0
            storedPlatin:
              type: integer
              example: 0
    commands:
      type: object
      properties:
        commands:
          type: array
          items:
            type: string
            example: move [playerUUID] [robotUUID] [targetPlanetUUID] [transactionUUID]
paths:
  "/robots":
    post:
      summary: Spawns a robot
      tags:
      - robot
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/robot"
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
                example: Request could not be accepted
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                transaction_id:
                  type: string
                  format: uuid
                player:
                  type: string
                  format: uuid
                planet:
                  type: string
                  format: uuid
              required:
              - transaction_id
              - player
              - planet
    get:
      summary: Reveice data about all robots belonging to a specified player
      tags:
      - robot
      responses: #TODO POST verbieten in bestimmten Faellen
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/robot"
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
                example: Request could not be accepted
      parameters:
      - name: player-id
        in: query
        schema:
          type: string
          format: uuid
      
        
  "/robots/{robot-uuid}":
    get:
      summary: Receive robot data
      tags:
      - robot
      parameters:
      - name: robot-uuid
        in: path
        required: true
        schema:
          type: string
      responses:
        '200': #response für ungültige ID und kein Zugriff erlaubt
          description: Return data of requested robot
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/robot"
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
                example: Request could not be accepted
    patch:
      summary: Change attributes of specified robot. Used for trading, upgrading, mining, movement
      description: For movement change planet, level attributes are for upgdrading and the inventory is for trading/mining
      tags:
      - robot
      parameters:
      - name: robot-uuid
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: 
                type: string
                example: requested changes have been accepted
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                type: string
                example: Upgrade for robot 3fa85f64-5717-4562-b3fc-2c963f66afa6 not possible
          
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                planet: #movement
                  type: string
                  format: uuid
                healthLevel: #upgrade
                  type: integer
                  minimum: 0
                  maximum: 5
                damageLevel: #upgrade
                  type: integer
                  minimum: 0
                  maximum: 5
                miningSpeedLevel: #upgrade
                  type: integer
                  minimum: 0
                  maximum: 5
                miningLevel: #upgrade
                  type: integer
                  minimum: 0
                  maximum: 5
                energyLevel: #upgrade
                  type: integer
                  minimum: 0
                  maximum: 5
                energyRegenLevel: #upgrade
                  type: integer
                  minimum: 0
                  maximum: 5
                storageLevel: #upgrade
                  type: integer
                  minimum: 0
                  maximum: 5
                inventory: #mining/trade
                  type: object
                  properties:
                    storedCoal:
                      type: integer
                      example: 3
                    storedIron:
                      type: integer
                      example: 2
                    storedGem:
                      type: integer
                      example: 0
                    storedGold:
                      type: integer
                      example: 0
                    storedPlatin:
                      type: integer
                      example: 0
  "/commands":
    post:
      summary: Post a batch of commands to be executed
      description: "This endpoint allows the game service to send a batch of commands to be executed in the current phase. Each entry in the array is one command. <br><br>
        Commands: <br>
        block [playerUUID] [robotUUID] [transactionUUID] <br>
        move [playerUUID] [robotUUID] [targetPlanetUUID] [transactionUUID] <br>
        fight [playerUUID] [robotUUID] [targetRobotUUID] [transactionUUID] <br>
        mine [playerUUID] [robotUUID] [transactionUUID] <br>
        regenerate [playerUUID] [robotUUID] [transactionUUID] <br>
        use-item-fighting [playerUUID] [robotUUID] [itemType] [targetUUID] [transactionUUID] <br>
        use-item-movement [playerUUID] [robotUUID] [itemType] [transactionUUID] <br><br>
        
        [targetUUID] is either a robot or a planet, depending on the item type <br>
        [itemType] can be rocket, wormhole, bombardment, self_destruct, reparation_swarm or nuke"
      tags:
      - commands
      responses:
        '202':
          description: Accepted
          content:
            application/json:
              schema:
                type: string
                example: Command batch accepted
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
                example: Request could not be accepted
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/commands"
servers:
- url: http://{defaultHost}
  variables:
    defaultHost:
      default: localhost:8082